# GitHub Actions CI/CD Workflow
# KissBot Neural V2 - TwitchIO 3.x
# 
# Test Strategy:
# - tests-ci/ → Structure + imports with mocks + Shannon validation (86 tests, 60 pass, 26 skip)
# - tests-local/ → Real pipeline with API keys (NOT run in CI)

name: KissBot CI

on:
  push:
    branches: [ main, develop, dev ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov
        pip install -e .  # Install package in editable mode for imports
    
    - name: 🔧 Setup test environment
      run: |
        # Copy config example for tests
        mkdir -p config
        cp config/config.yaml.example config/config.yaml
    
    - name: 🧪 Run all CI tests (structure validation with mocks)
      run: |
        echo "::group::CI Tests (Structure + Shannon Validation)"
        pytest tests-ci/ -c tests-ci/pytest-ci.ini -v --tb=short --color=no --cov=. --cov-report=term --cov-report=json
        echo "::endgroup::"
    
    - name: 📊 Generate coverage badge
      if: matrix.python-version == '3.12' && github.ref == 'refs/heads/main'
      run: |
        # Extract coverage percentage
        COVERAGE=$(python -c "import json; print(json.load(open('coverage.json'))['totals']['percent_covered_display'])")
        echo "Coverage: $COVERAGE%"
        
        # Determine badge color
        if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
          COLOR="brightgreen"
        elif (( $(echo "$COVERAGE >= 60" | bc -l) )); then
          COLOR="yellow"
        else
          COLOR="red"
        fi
        
        # Generate SVG badge using shields.io
        mkdir -p badges
        curl -o badges/coverage.svg "https://img.shields.io/badge/coverage-${COVERAGE}%25-${COLOR}"
        
        echo "Badge generated: coverage-${COVERAGE}%-${COLOR}"
    
    - name: 📤 Deploy coverage badge
      if: matrix.python-version == '3.12' && github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./badges
        publish_branch: badges
        keep_files: false
        commit_message: 'Update coverage badge'
    
    - name: 📤 Upload coverage artifact
      if: matrix.python-version == '3.12'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage.json
          badges/coverage.json
          htmlcov/
        retention-days: 30
    
    - name: 📊 Generate test summary
      if: always()
      run: |
        echo "## 🎯 KissBot Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🏗️ CI Tests (Structure + Shannon - 86 tests)" >> $GITHUB_STEP_SUMMARY
        pytest tests-ci/ -c tests-ci/pytest-ci.ini --tb=no -q --color=no >> $GITHUB_STEP_SUMMARY 2>&1 || true
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**ℹ️ Note**: Local tests (7 tests with real API keys) are not run in CI" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Coverage**: CI validates structure, imports, and Shannon formulas" >> $GITHUB_STEP_SUMMARY
    
    - name: ✅ All tests passed
      run: echo "🎉 All CI tests passed! Structure validated + Shannon formulas confirmed"

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    
    - name: 📦 Install linting tools
      run: |
        pip install ruff mypy
      continue-on-error: true
    
    - name: 🔍 Lint with Ruff (fast Python linter)
      run: |
        ruff check . --select E,F,W --ignore E501
      continue-on-error: true
    
    - name: 🔍 Type check with MyPy
      run: |
        mypy intelligence/ commands/ core/ backends/ --ignore-missing-imports
      continue-on-error: true

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    
    - name: 🔒 Security audit (dependencies)
      run: |
        python -m pip install --upgrade pip
        pip install safety
        safety scan --output text || true
      continue-on-error: true
