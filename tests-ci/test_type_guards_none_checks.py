"""
ü¶Ä Tests Type Guards - None Checks (Rust-style safety)

Teste les None checks ajout√©s pour mypy strict compliance.
V√©rifie que les guards prot√®gent contre les edge cases twitchio.
"""

import pytest
from unittest.mock import Mock


class TestTranslationNoneChecks:
    """Tests des None checks dans translation.py"""

    def test_none_message_check_exists(self):
        """üîç V√©rifie que le check `if not ctx.message` existe dans translate_text"""
        import pathlib

        translation_file = pathlib.Path(__file__).parent.parent / "commands" / "translation.py"
        source = translation_file.read_text()

        # V√©rifie pr√©sence du None check dans translate_text
        assert "if not ctx.message or not ctx.message.content:" in source
        assert "return" in source  # Early return

    def test_none_content_check_exists(self):
        """üîç V√©rifie que le check existe pour adddev/deldev aussi"""
        import pathlib

        translation_file = pathlib.Path(__file__).parent.parent / "commands" / "translation.py"
        source = translation_file.read_text()

        # Compte les occurrences de None checks
        none_checks = source.count("if not ctx.message or not ctx.message.content:")

        # Devrait y en avoir au moins 3 (translate_text, add_dev, del_dev)
        assert none_checks >= 3, f"Expected at least 3 None checks, found {none_checks}"

    def test_adddev_none_checks_exist(self):
        """üîç V√©rifie que add_dev a des None checks"""
        import pathlib

        translation_file = pathlib.Path(__file__).parent.parent / "commands" / "translation.py"
        source = translation_file.read_text()

        # V√©rifie pr√©sence dans add_dev
        assert "def add_dev" in source
        assert source.count("if not ctx.message") >= 2  # Au moins 2 occurrences

    def test_deldev_none_checks_exist(self):
        """üîç V√©rifie que del_dev a des None checks"""
        import pathlib

        translation_file = pathlib.Path(__file__).parent.parent / "commands" / "translation.py"
        source = translation_file.read_text()

        # V√©rifie pr√©sence dans del_dev
        assert "def del_dev" in source
        assert source.count("if not ctx.message") >= 3  # Au moins 3 occurrences


class TestQuantumCommandsAttributeChecks:
    """Tests des attributs twitchio is_mod/is_broadcaster"""

    def test_can_trigger_decoherence_checks_mod(self):
        """üîç V√©rifie que _can_trigger_decoherence check is_mod"""
        from commands.quantum_commands import QuantumCommands
        import inspect

        source = inspect.getsource(QuantumCommands._can_trigger_decoherence)

        # V√©rifie que is_mod est v√©rifi√©
        assert "is_mod" in source

    def test_can_trigger_decoherence_checks_broadcaster(self):
        """üîç V√©rifie que _can_trigger_decoherence check is_broadcaster"""
        from commands.quantum_commands import QuantumCommands
        import inspect

        source = inspect.getsource(QuantumCommands._can_trigger_decoherence)

        # V√©rifie que is_broadcaster est v√©rifi√©
        assert "is_broadcaster" in source

    def test_can_trigger_with_mock_mod(self):
        """üîç Test avec mock (is_mod=True)"""
        from commands.quantum_commands import QuantumCommands

        ctx = Mock()
        ctx.author = Mock()
        ctx.author.is_mod = True
        ctx.author.is_broadcaster = False

        quantum = QuantumCommands()
        result = quantum._can_trigger_decoherence(ctx)

        # Mod devrait pouvoir trigger
        assert result is True

    def test_can_trigger_with_mock_broadcaster(self):
        """üîç Test avec mock (is_broadcaster=True)"""
        from commands.quantum_commands import QuantumCommands

        ctx = Mock()
        ctx.author = Mock()
        ctx.author.is_mod = False
        ctx.author.is_broadcaster = True

        quantum = QuantumCommands()
        result = quantum._can_trigger_decoherence(ctx)

        # Broadcaster devrait pouvoir trigger
        assert result is True


class TestNoneChecksJustification:
    """Documente pourquoi les None checks sont n√©cessaires"""

    def test_none_checks_are_defensive_not_useless(self):
        """üìä ANALYSE: Les None checks sont-ils vraiment n√©cessaires?

        Conclusion: OUI car twitchio peut retourner None dans certains edge cases:
        - Message syst√®me (SUB, RAID, etc)
        - Webhook events
        - Message supprim√© rapidement
        - IRC malform√©
        """
        edge_cases = [
            "Message syst√®me (SUB notification)",
            "Webhook event (pas de message texte)",
            "Message supprim√© avant parsing",
            "IRC frame malform√©",
            "Timeout pendant fetch message",
        ]

        # Les None checks prot√®gent contre tous ces cas
        assert len(edge_cases) > 0, "None checks sont d√©fensifs contre edge cases r√©els"

    def test_mypy_errors_without_none_checks(self):
        """ü¶Ä MYPY: Sans None checks ‚Üí erreurs type union-attr

        Avant: ctx.message.content ‚Üí error: Item "None" has no attribute "content"
        Apr√®s: if not ctx.message ‚Üí mypy happy
        """
        # Documentation du probl√®me mypy r√©solu
        mypy_error_before = 'Item "ChatMessage | None" has no attribute "content"'
        solution = "if not ctx.message or not ctx.message.content: return"

        assert mypy_error_before != solution
        assert "None" in mypy_error_before
        assert "if not" in solution
