"""
üß™ Test Fix Personnalit√©: Validation prompt am√©lior√© pour mentions

Test les changements:
1. Personnalit√© simplifi√©e (dr√¥le, sarcastique, direct)
2. max_tokens mention: 150 ‚Üí 200
3. Prompt syst√®me am√©lior√© avec r√®gles claires
"""

import asyncio
import yaml
from pathlib import Path
import sys

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from intelligence.neural_pathway_manager import NeuralPathwayManager
from intelligence.core import process_llm_request


def load_config():
    """Load configuration from YAML file."""
    with open('config/config.yaml', 'r', encoding='utf-8') as f:
        return yaml.safe_load(f)


async def test_personality_mentions():
    """Test r√©ponses aux mentions avec nouvelle personnalit√©"""
    print("=" * 70)
    print("üß™ TEST FIX PERSONNALIT√â: Mentions avec prompt am√©lior√©")
    print("=" * 70 + "\n")
    
    # Load config
    config = load_config()
    personality = config.get("bot", {}).get("personality", "")
    
    print("üìã Nouvelle personnalit√©:")
    print(f"   {personality}\n")
    
    # Initialize LLM handler
    llm_handler = NeuralPathwayManager(config)
    print("‚úÖ LLM handler initialized\n")
    
    # Test questions typiques
    test_cases = [
        "comment √ßa va ?",
        "salut toi ! comment tu va ?",
        "tu fais quoi ?",
        "qui es-tu ?",
        "raconte-moi une blague",
    ]
    
    print("üé≠ Test 5 questions avec nouvelle personnalit√©:\n")
    
    for i, question in enumerate(test_cases, 1):
        print(f"üì¢ Question {i}: {question}")
        
        response = await process_llm_request(
            llm_handler=llm_handler,
            prompt=question,
            context="mention",
            user_name="el_serda_test",
            game_cache=None,
        )
        
        print(f"ü§ñ R√©ponse: {response}")
        print(f"üìè Longueur: {len(response)} caract√®res\n")
        
        # V√©rifications
        issues = []
        if "taquin" in response.lower() and "jeu" in response.lower():
            issues.append("‚ö†Ô∏è Interpr√®te 'taquin' comme jeu")
        if "cash" in response.lower() and "argent" in response.lower():
            issues.append("‚ö†Ô∏è Interpr√®te 'cash' comme argent")
        if len(response) > 400:
            issues.append(f"‚ö†Ô∏è Trop long ({len(response)} > 400 chars)")
        if response.endswith("..."):
            issues.append("‚ö†Ô∏è R√©ponse tronqu√©e")
        
        if issues:
            print("   Issues d√©tect√©es:")
            for issue in issues:
                print(f"     {issue}")
            print()
        
        await asyncio.sleep(0.5)
    
    print("=" * 70)
    print("‚úÖ TEST TERMIN√â")
    print("=" * 70)


if __name__ == "__main__":
    asyncio.run(test_personality_mentions())
